{"config":{"lang":["nl"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welkom-bij-sd-cheat-sheets","title":"Welkom bij SD Cheat Sheets","text":"<p>Hier vind je handige Cheat Sheets en Tutorials over Software Development om je geheugen mee op te frissen.</p> <p>Gebruik de Cheat Sheets om snel even na te lezen hoe je iets ook alweer doet. Vaak krijg je korte code snippets te zien die je direct kunt gebruiken in je eigen code.</p> <p>De Cheat Sheets zijn in helder Nederlands geschreven en zijn geschikt voor studenten Software Development.</p>"},{"location":"basis-programmeren/","title":"Basis Programmeren","text":""},{"location":"basis-programmeren/#basis-programmeren-tutorial","title":"Basis Programmeren Tutorial","text":""},{"location":"basis-programmeren/#basis-ingredienten","title":"Basis ingredi\u00ebnten","text":"<p>De basis van elke programmeertaal bestaat uit maar een paar dingen. En omdat programmeren in het Engels gaat, gebruiken we meteen maar de Engelse termen:</p> <ul> <li>Variables, Expressions en Operators</li> <li>Control Flow</li> <li>Functions</li> <li>Data Structures</li> <li>Input en Output</li> </ul> <p>Deze elementen komen in elke taal terug!</p> <p>De enige manier om te leren programmeren is door programma's te schrijven. Maar welke taal moet je kiezen om mee te starten? In deze Tutorial wordt voornamelijk JavaScript gebruikt en hier en daar krijg je ook alvast een inkijkje in hoe het in andere talen werkt.</p>"},{"location":"basis-programmeren/#ontwikkelomgeving-opzetten","title":"Ontwikkelomgeving opzetten","text":"<p>Om ons eerste programma in JavaScript te maken installeren we twee nieuwe programma's:</p> <ul> <li>Node.js</li> <li>Visual Studio Code</li> </ul> <p>Met Visual Studio Code kan je JavaScript code schrijven en Node.js kan JavaScript code uitvoeren.</p> <p>Download de Node.js Prebuilt Installer hier: https://nodejs.org/en/download/prebuilt-installer</p> <p>Download Visual Studio Code hier: https://code.visualstudio.com/download</p> <p>Installeer Node.js en Visual Studio Code</p> <p>Open Visual Studio Code en maak een folder aan met de naam \"sdcheatsheets\". Maak in de nieuwe folder een nieuw bestand aan met de naam helloworld.js.</p> <p></p> <p>Het is een goed gebruik om je eerste programma in een nieuwe taal \"hello world\" te noemen.</p> <p>Nu gaan we de code schrijven voor ons helloworld.js programma. Dat is nu nog maar 1 regel:</p> <p><pre><code>console.log(\"Hello, World!\");\n</code></pre> Open een nieuwe Terminal en voer het programma uit: <pre><code>node .\\helloworld.js # (1)!\n</code></pre></p> <ol> <li> Je hoef niet alles zelf te typen! Begin met \"node hel\" te typen, en druk dan op de Tab toets om de Terminal de rest automatisch af te laten maken.</li> </ol> <p></p> <p>Nu je het hello world JavaScript programma werkend hebt, kunnen we aan de slag met het verkennen van de basisingredi\u00ebnten van programmeren.</p> <p>Schrijf de code stap voor stap mee. Elke keer als je deze emoji ziet: , pas je de code aan en test je de code op de terminal.</p>"},{"location":"basis-programmeren/#variabelen","title":"Variabelen","text":"<p>Een variabele is een stukje geheugen van de computer waar we een waarde in kunnen opslaan. </p> <p>Een variabele heeft een naam en een waarde.</p> <p>In elke taal kan een variabele er anders uitzien, maar het principe blijft hetzelfde. Hier wat voorbeelden van een variabele in verschillende programmeertalen:</p> JavaScriptPHPPythonCC++C# <pre><code>let greeting = \"Hello, World!\";\n</code></pre> <pre><code>$greeting = \"Hello, World!\";\n</code></pre> <pre><code>greeting = \"Hello, World!\";\n</code></pre> <pre><code>char greeting[] = \"Hello, World!\";\n</code></pre> <pre><code>string greeting = \"Hello, World!\";\n</code></pre> <pre><code>string greeting = \"Hello, World!\";\n\n// Je kan dit ook zo doen (maar alleen met locale variabelen in methods):\n\nvar greeting = \"Hello, World!\";\n</code></pre>"},{"location":"basis-programmeren/#syntax","title":"Syntax","text":"<p>Je ziet wel, verschillende talen, verschillende manieren. Dit noemen we de syntax van een taal. Elke taal heeft een andere syntax, een andere manier van schrijven.</p> <p>Maar in alle voorbeelden is het resultaat hetzelfde: de variabele \"greeting\" krijgt de waarde \"Hello, World!\".</p> <p></p> <p>Nu gaan we deze nieuwe kennis toepassen in ons JavaScript programma, verander de code en run daarna de code om te testen dat het programma nog steeds hetzelfde werkt:</p> <pre><code>let greeting = \"Hello, World!\";\nconsole.log(greeting);\n</code></pre>"},{"location":"basis-programmeren/#comments","title":"Comments","text":"<p>Voordat we aan de slag gaan met programmeren moet je eerst weten van comments, commentaar in code. In de voorbeeld code verderop in deze tutorial komt dit namelijk regelmatig voor. Een comment is een stukje uitleg bij code die verder niet gebruikt wordt door de computer. Het is bedoeld om uit te leggen wat een stukje code doet.</p> <p>Je gebruikt comments voor jezelf, om later beter te begrijpen waarom je iets doet, maar ook voor andere programmeurs die met jouw code moeten werken.</p> <p>In JavaScript begin je een comment met twee forward slashes \"//\". Alles wat daarna komt is een comment.</p> <p>Bijvoorbeeld:</p> <pre><code>// The first elf has to be Aragorn\nlet elf1 = 'Aragorn';\n</code></pre> <p>of </p> <pre><code>let elf2 = 'Arwen'; // The second elf must be Arwen\n</code></pre> <p>Als je meerdere regels met commentaar wilt schrijven dan zet je het commentaar tussen <code>/*</code> en <code>*/</code>. Bijvoorbeeld zo:</p> <pre><code>/* \n   The first elf must always be Aragorn\n   The second elf must always be Arwen\n   All the other elven names can be any name\n*/\nlet elf1 = 'Aragorn';\nlet elf2 = 'Arwen';\nlet elf3 = 'Arathorn';\n</code></pre>"},{"location":"basis-programmeren/#if-else","title":"if-else","text":"<p>Een if-else block is een onderdeel van Control Flow in je programma. Met Control Flow wordt bedoeld in welke volgorde je code wordt uitgevoerd. Normaal gesproken loopt een computerprogramma van de eerste regel tot de laatste regel, maar dit kan je op een aantal manieren be\u00efnvloeden. Bijvoorbeeld met een if-else block.</p> <p></p> <p>We passen het programma aan zodat we te weten komen welk moment van de dag het is, ochtend, middag of avond. Daarna laten we een nieuwe melding zien met 'Good Morning', 'Good Afternoon' of 'Good Evening'.</p> <pre><code>let greeting = \"Hello, World!\";\nconsole.log(greeting);\n\nconst now = new Date();\nconst hour = now.getHours();\n\nif (hour &lt; 12) {\n    console.log(\"Good Morning\");\n} else if (hour &lt; 18) {\n    console.log(\"Good Afternoon\");\n} else {\n    console.log(\"Good Evening\");\n}\n</code></pre> <ul> <li>op regel 3 en 4 wordt in twee stappen het huidige uur van de dag opgehaald</li> <li>op regel 6 staat: als hour kleiner is dan 12. Als dit waar (true) is dan wordt de code tussen de twee krulhaken {} eronder uitgevoerd, als het niet waar (false) is dan gaat de code verder op regel 8</li> <li>op regel 8 staat: als hour kleiner is dan 18. Als dit waar is dan wordt de code eronder uitgevoerd, als het niet waar is dan gaat de code verder met regel 10</li> <li>regel 10 zegt: als al het bovenstaande niet waar is, voer dan de code hieronder uit</li> </ul> <p>const</p> <p>Het keyword const is een manier om een zogenaamde constante te maken. Een constante is een variabele waarvan de waarde nooit meer zal veranderen. Het is netjes om const te gebruiken als je weet dat de variabele niet zal veranderen.</p>"},{"location":"basis-programmeren/#operators","title":"Operators","text":"<p>Je ziet in de code hierboven alvast \u00e9\u00e9n Operator, het kleiner dan teken <code>&lt;</code>. Er zijn nog meer operators. Je gebruikt operators in Expressions. <code>(hour &lt; 12)</code> noemen we een expression.</p> <p>Hier is een lijst van veelgebruikte operators (JavaScript):</p> Operator Beschrijving <code>+</code> Optelling <code>-</code> Aftrekking <code>*</code> Vermenigvuldiging <code>/</code> Deling <code>%</code> Modulus (restwaarde van een deling) <code>++</code> Increment (verhoog met \u00e9\u00e9n) <code>--</code> Decrement (verlaag \u00e9\u00e9n) <code>=</code> Toewijzing <code>==</code> Gelijkheid (vergelijken van waarden) <code>!=</code> Ongelijkheid (vergelijking van waarden) <code>&gt;</code> Groter dan <code>&lt;</code> Kleiner dan <code>&gt;=</code> Groter dan of gelijk aan <code>&lt;=</code> Kleiner dan of gelijk aan <code>&amp;&amp;</code> Logische EN <code>||</code> Logische OF <code>!</code> Logische NIET"},{"location":"basis-programmeren/#expressions","title":"Expressions","text":"<p>Een expression is een combinatie van variabelen en/of constanten en/of functies en operators. Een expression levert een bepaalde waarde op. Dat kan een getal zijn of true of false of juist helemaal niks (null).</p> <p>Hier zijn wat voorbeelden van eenvoudige expressions:</p> Expression Beschrijving Uitkomst 10 &lt; 20 10 is kleiner dan 20 true 10 &gt; 20 10 is groter dan 20 false 10 == 20 10 is gelijk aan 20 false 10 + 20 10 plus 20 30"},{"location":"basis-programmeren/#loops","title":"Loops","text":"<p>We gaan verdeer met een andere manier om de Control Flow te veranderen, de loop. Een loop (lus in het Nederlands), is een manier om code te herhalen. Stel je voor dat je in plaats van maar \u00e9\u00e9n keer, wel tien keer \"Hello, World!\" wilt laten zien. Je kan ervoor kiezen om dan gewoon tien keer <code>console.log(\"Hello, World!\")</code> te coderen:</p> <p><pre><code>console.log(\"Hello, World!\");\nconsole.log(\"Hello, World!\");\nconsole.log(\"Hello, World!\");\nconsole.log(\"Hello, World!\");\nconsole.log(\"Hello, World!\");\nconsole.log(\"Hello, World!\");\nconsole.log(\"Hello, World!\");\nconsole.log(\"Hello, World!\");\nconsole.log(\"Hello, World!\");\nconsole.log(\"Hello, World!\");\n</code></pre> Dat ziet er niet goed uit! Een loop brengt uitkomst. Je kan een while loop of een for loop gebruiken:</p> while loopfor loop <pre><code>let i = 0;\nwhile (i &lt; 10) {\n  console.log(\"Hello, World!\");\n  i = i + 1;\n}\n</code></pre> <pre><code>for (let i = 0; i &lt; 10; i++) {\n  console.log(\"Hello, World!\");\n}\n</code></pre> <p>Dat is beter! Het scheelt zelfs vijf regels code. De for loop is nog korter, drie regels code. Of je een for loop of een while loop gebruikt is afhankelijk van de situatie. </p> <p>Je kiest vaak een for loop als je van tevoren weet hoe vaak je wilt loopen. En als je nog niet weet hoe vaak je wilt herhalen, dan kies je de while loop. Verder doen ze allebei hetzelfde.</p>"},{"location":"basis-programmeren/#de-onderdelen-van-een-while-loop","title":"De onderdelen van een while loop","text":"<p>Allereerst moet je kunnen bijhouden hoe vaak de loop is uitgevoerd. Dit doe je met een variabele. Vaak noemen we deze variabele \"i\" (de \"i\" staat voor iteration, herhaling).</p> <p>Je hebt ook een expression nodig om te bepalen wanneer de loop moet stoppen</p> <p>Tenslotte heb je de body van de loop. In de body wordt het eigenlijke werk van de loop gedaan. In veel talen, en ook in JavaScript, staat de body van de loop tussen twee krulhaken.</p> <p>In de body kan je ook de teller ophogen, zodat je weet hoe vaak de loop is uitgevoerd.</p> <p> </p>"},{"location":"basis-programmeren/#de-onderdelen-van-een-for-loop","title":"De onderdelen van een for loop","text":"<p>Een for loop heeft dezelfde onderdelen als een while loop: een teller, een expression om aan te geven wanneer de loop stopt, een ophoging van de teller en natuurlijk een body.</p> <p>Het verschil is dat de teller, de expression en de ophoging nu in 1 regel geschreven zijn, met puntkomma's ertussen:</p> <p> </p> <p>Stapgrootte veranderen</p> <p>Je bepaalt zelf hoe vaak de loop loopt. In de bovenste voorbeelden is dat honderd keer. </p> <p>De teller begint bij 0 (<code>let i = 0</code>) en eindigt bij 99 (want de expression zegt <code>i &lt; 100</code>). En de teller wordt elke keer met 1 opgehoogd. </p> <p>Maar je kan dit ook veranderen. Je bepaalt zelf waar de teller begint en ook met hoeveel de teller elke keer wordt opgehoogd.</p> <p>De onderstaande for loop begint bij 10, loopt door tot en met 100, in stappen van 10:</p> <pre><code>for (let i = 10; i &lt;= 100; i+=10) {\n  // do something great\n}\n</code></pre>"},{"location":"basis-programmeren/#functies","title":"Functies","text":"<p>Functies zijn aparte stukjes code die je een naam kan geven en door je hele code heen kan hergebruiken. Met functies maak je je code overzichtelijker. En je voorkomt dat je dezelfde code vaker dan \u00e9\u00e9n keer hoeft te schrijven. In plaats van de code elke keer opnieuw te typen, maak je een functie en roep je die functie aan wanneer je hem wilt gebruiken.</p> <p>Een voorbeeld maakt alles duidelijk. </p> <p>We zeggen het Hello World programma gedag en maken een nieuw programma. Zorg dat helloworld.js is opgeslagen en voeg een nieuwe file toe. Dit bestand noem je \"chatbot.js\".</p> <p></p> <p>Om input van de gebruiker te vragen hebben we een library nodig. Een library is een pakket met code die door anderen is geschreven. De library die wij gaan gebruiken heet prompt-sync.</p> <p>Je installeert de libary vanuit de terminal. Type de volgende code in de terminal om de library te installeren:</p> <p><pre><code>npm -i prompt-sync\n</code></pre> De library wordt geinstalleerd. Je ziet ook een nieuwe map verschijnen \"node-modules\". In deze map worden de libraries die je installeert opgeslagen.</p> <p>Voeg nu de onderstaande code toe.</p> <p> <pre><code>const prompt = require('prompt-sync')();\n\nconst name = prompt('Hallo, ik ben je chatbot. Hoe heet jij? &gt; ');\nconsole.log(\"Hi \" + name);\n</code></pre></p> <p>Run het programma door in de Terminal <code>node .\\chatbot.js</code> te typen.</p> <p>Het begin is er, maar we willen een echte chatbot, dus moet de chatbot meer vragen gaan stellen en antwoorden geven. We maken hiervoor een loop zodat we na elke vraag en antwoord opnieuw een vraag kunnen stellen.</p> <p>Voeg de onderstaande code toe:</p> <p> <pre><code>let answer = prompt('Waar wil je het over hebben? &gt; ');\nwhile (answer != 'bye') {\n    answer = prompt('Dat is heel interessant! &gt; ');\n}\n\nconsole.log('Het was leuk, tot ziens!');\n</code></pre> De chatbot blijft in de loop zolang de variabele answer niet 'bye' is. Dat is namelijk wat de expression <code>answer != 'bye'</code> zegt. De gebruiker kan steeds iets nieuws typen en de chatbot zal blijven zeggen dat het interessant is.</p> <p>Als de gebruiker 'bye' typt dan wordt de expression in de while false en eindigt de loop. Daarna gaat de code verder met <code>console.log('Het was leuk, tot ziens!')</code> en daarna stop het hele programma.</p> <p>Ons programma ziet er tot nu toe zo uit:</p> <pre><code>const prompt = require('prompt-sync')();\n\nconst name = prompt('Hallo, ik ben je chatbot. Hoe heet jij? &gt; ');\nconsole.log(\"Hi \" + name);\n\nlet answer = prompt('Waar wil je het over hebben? &gt; ');\nwhile (answer != 'bye') {\n    answer = prompt('Dat is heel interessant! &gt; ');\n}\n\nconsole.log('Het was leuk, tot ziens!');\n</code></pre> <p>En dan nu even over die functies, want daar gaat dit hoofdstuk over. We gaan van regel 6 t/m 9 een functie maken.</p> <p>Voeg onderaan, na regel 11, de volgende code toe:</p> <p><pre><code>function talk() {\n\n}\n</code></pre> Verplaats nu regel 6 t/m 9 naar de body van de function talk (dus tussen de krulhaken). En tenslotte zet je daarvoor in de plaats: <code>talk();</code>. Hiermee roep je de function aan.</p> <p>We kunnen ook een functie maken van regel 3 en 4, die functie noemen we dan intro():</p> <p><pre><code>function intro() {\n  const name = prompt('Hallo, ik ben je chatbot. Hoe heet jij? &gt; ');\n  console.log(\"Hi \" + name);\n}\n</code></pre> En zelfs regel 11, met de afsluitende tekst, zouden we voor de netheid in een functie kunnen zetten. Die noemen we dan <code>function goodBye()</code>.</p> <p>Het resultaat ziet er dan zo uit:</p> <pre><code>const prompt = require('prompt-sync')();\n\nintro();\ntalk();\ngoodBye();\n\nfunction intro() {\n    const name = prompt('Hallo, ik ben je chatbot. Hoe heet jij? &gt; ');\n    console.log(\"Hi \" + name);\n}\n\nfunction talk() {\n    let answer = prompt('Waar wil je het over hebben? &gt; ');\n    while (answer != 'bye') {\n        answer = prompt('Dat is heel interessant! &gt; ');\n    }\n}\n\nfunction goodBye() {\n    console.log('Het was leuk, tot ziens!');\n}\n</code></pre> <p>De code is nu best overzichtelijk geworden. Je kan duidelijk zien dat de code uit drie stappen bestaat, een intro, een stukje met praten, en het tot ziens zeggen. De rest van de code bestaat uit functions. </p> <p>Op deze manier willen we eigenlijk al onze programma's proberen te maken. </p>"},{"location":"basis-programmeren/#arrays","title":"Arrays","text":"<p>Een array is kort gezegd een lijst met waarden. </p> <p>Je kan je een array goed vergelijken met een ladekast met inhoud. In elke lade zit iets en op de laden staan nummers. </p> <p>Als je iets uit een lade wilt bekijken dan gebruik je het nummer om te vertellen van welke lade je de inhoud wilt bekijken of gebruiken.</p> <p>De nummering is zero-based. Dat wil zeggen dat het eerste laadje nummer 0 heeft.</p> <p>Je kan in een array van alles stoppen, getallen, strings (woorden), en zelfs een andere arrays. Als je bijvoorbeeld een lijst met vijf namen wilt maken doe je dat in JavaScript code zo:</p> <p><code>const myNames = ['Jan', 'Els', 'Piet', 'Sofian', 'Jasmin'];</code></p> <p>of een array met 5 getallen:</p> <p><code>const myNumbers = [18, 22, 75, 12, 102];</code></p> <p>Als je iets uit de array wilt gebruiken dan gebruik je het nummer van het element dat je wilt gebruiken. We noemen dat de index.</p> <p><code>let myFriend = myNames[3]; // myFriend wordt nu 'Piet'</code></p> <p>of </p> <p><code>let myAge = myNumbers[0] // myAge wordt nu '18'</code></p> <p>Een array is een van de verschillende soorten Data Structures die we kunnen gebruiken bij het programmeren.</p> <p>Laten we kijken hoe we een array kunnen gebruik in de chatbot. Op dit moment reageert de chatbot alleen maar met 'Dat is heel interessant!'. We zouden een array kunnen maken met verschillende antwoorden en dan steeds een ander antwoord kiezen. Dat zou al wat variatie geven.</p> <p>We hebben dus een array met strings nodig. Hier zijn wat suggesties, maar voel je vrij om je eigen antwoorden te verzinnen:</p> <p><pre><code>const answers = [\n  'Dat is heel interessant!',\n  'Je zou het niet zeggen!',\n  'Hoe is het mogelijk!',\n  'Wat een toeval!',\n  'Dat geloof je bijna niet!'\n];\n</code></pre> Dit is een array met vijf elementen. Je kan er zelf nog meer bijmaken als je dat wilt.</p> <p>Deze array gaan we gebruiken om de chatbot steeds iets anders te laten zeggen (niet echt steeds iets anders, maar in elk geal niet de hele tijd hetzelfde).</p> <p>Je zou ervoor kunnen kiezen om de verschillende antwoorden in volgorde te geven, en als je het laatste antwoord hebt gegeven dan weer bij het eerste antwoord opnieuw te beginnen. Maar misschien is het leuker om een willekeurig antwoord te kiezen.</p> <p>Om een willekeurig antwoord te kiezen hebben we een willekeurig getal tussen de 0 en 4 nodig. Een array is namelijk zero-based en begint bij 0.</p> <p>In JavaScript heb je daar een ingebouwde functie voor, de functie Math.random(). Deze functie geeft een willekeurig kommagetal tussen de 0 en de 1. Door dit getal met 5 te vermenigvuldigen en naar beneden af te ronden, krijgen we een getal tussen de 0 en 4 terug. Kijk maar:</p> <p>0.11 * 5 = 0,55, is naar beneden afgerond 0</p> <p>0.99 * 5 = 4.95, is naar beneden afgerond 4</p> <p>Je kan in JavaScript een getal naar beneden afronden met de function Math.floor()</p> <p>Door die twee ingebouwde functies te gebruiken kan je dus een random getal tussen 0 en 4 als volgt genereren:</p> <p><pre><code>let randomAnswer = Math.random();\nrandomAnswer = Math.floor(randomAnswer * 5);\n</code></pre> Je kan dit ook in 1 regel schrijven:</p> <pre><code>let randomAnswer = Math.floor(Math.random() * 5);\n</code></pre> <p></p> <p>Weet jij nu hoe je de code moet aanpassen om de chatbot een willekeurig antwoord te laten geven? Gebruik de bovenstaande informatie om het eerst zelf te proberen. Kijk daarna pas naar de uitgewerkte code.</p> Uitgewerkte code <pre><code>const prompt = require('prompt-sync')();\n\nintro();\ntalk();\ngoodbye();\n\nfunction intro() {\n    const name = prompt('Hallo, ik ben je chatbot. Hoe heet jij? &gt; ');\n    console.log(\"Hi \" + name);\n}\n\nfunction talk() {\n    const answers = [\n        'Dat is heel interessant!',\n        'Je zou het niet zeggen!',\n        'Hoe is het mogelijk!',\n        'Wat een toeval!',\n        'Dat geloof je bijna niet!'\n    ];\n\n    let answer = prompt('Waar wil je het over hebben? &gt; ');\n\n    while (answer != 'bye') {\n        let randomAnswer = Math.floor(Math.random() * 5);\n        let randomText = answers[randomAnswer] + ' &gt; ';\n        answer = prompt(randomText);\n    }\n}\n\nfunction goodBye() {\n    console.log('Het was leuk, tot ziens!');\n}\n</code></pre>"},{"location":"basis-programmeren/#de-reis-kan-beginnen","title":"De reis kan beginnen.","text":"<p>Je hebt nu kennisgemaakt met de basisingredi\u00ebnten van het programmeren. </p> <ul> <li>Je hebt je ontwikkelomgeving op orde</li> <li>Je hebt gezien wat variabelen zijn en hoe ze werken</li> <li>Je weet hoe je een if-else statement kan maken</li> <li>Je weet hoe je loops kan gebruiken</li> <li>Je hebt kennisgemaakt met functies</li> <li>Je hebt de data structure array leren kennen</li> </ul> <p>En daarmee sluiten we deze tutorial af. </p> <p>Met de opgedane kennis als basis kan jouw reis als programmeur beginnen. Misschien heb je wel idee\u00ebn over hoe de chatbat nog dynamischer kan worden. </p> <p>Stille hint: de functies intro() en goodBye() kunnen ook wel wat variatie gebruiken ;-).</p> <p>Veel plezier bij het programmeren!</p>"},{"location":"css/","title":"CSS","text":""},{"location":"css/#css-cheat-sheet","title":"CSS Cheat Sheet","text":""},{"location":"css/#cascading-style-sheets","title":"Cascading Style Sheets","text":"<p>CSS staat voor Cascading Style Sheets. Je kan er dus mee stylen. En het woord Cascading betekent trapsgewijs, de bestanden kunnen dus gestapeld worden, daarover hieronder meer.</p> <p>De eerste versie van CSS werd in 1996 gelanceerd. Inmiddels hebben we versie 3 van CSS.</p> <p>Browsers hebben zelf ook een ingebouwde stylesheet die de standaard style van elementen bepaalt. Met je eigen stylesheet kan je die standaard styles overschrijven.</p>"},{"location":"css/#bronnen","title":"Bronnen","text":"<p>De volgende sites geven uitgebreide informatie over CSS:</p> Site Beschrijving w3schools CSS Tutorial Veel voorbeelden en een mooie tryit editor om code uit te proberen. Codecademy Alles over CSS ingedeeld in categori\u00ebn. Handige en complete lijsten met kleuren, properties, etc. CSS-TRICS Mooie tutorials, videos en guides Mozilla Developer Network De autoriteit voor web development. Zakelijk, maar je weet zeker dat je goed zit TEMPLATED Een verzameling van html/css templates om inspiratie op te doen <p>Als je voorbeeld code uit deze cheat sheet snel wilt uitproberen gebruik dan de TryIt editor van W3Schools.</p>"},{"location":"css/#inline-styles-vs-externe-stylesheets","title":"inline styles vs externe stylesheets","text":"<p>CSS styles kunnen inline gebruikt worden of als externe stylesheets</p> <p>Als je CSS inline gebruikt dan zet je ze in een &lt;style&gt; element in de </p> <p><pre><code>&lt;head&gt;\n  &lt;style&gt;\n    #my-style {\n      color: yellow;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n</code></pre> Als je een extern stylesheet gebruikt dan link je het bestand in de &lt;head&gt;</p> <p><pre><code>&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n</code></pre> Beide methoden zijn goed. Je maakt zelf een keuze welke je wilt gebruiken. Die keuze is afhankelijk van de situatie. </p> <p>Als je snel even wat wilt testen, of als je aan het prototypen bent, is een inline style handig.</p> <p>Voor grotere projecten met uitgebreide styling is het overzichtelijker om externe stylesheets te gebruiken.</p>"},{"location":"css/#selectors","title":"Selectors","text":"<p>Een stylesheet is een tekstbestand met daarin selectors. De selectors bepalen voor welke elementen de style moet gelden.</p> <p>Een voorbeeld:</p> <p>In je html heb je het volgende element: </p> <pre><code>&lt;div id=\"green-box\"/&gt; \n</code></pre> <p>In je CSS bestand kan je nu de selector #green-box gebruiken om styling op deze  toe te passen. Bijvoorbeeld zo: <pre><code>#green-box {\n  background-color: green;\n}\n</code></pre> Er bestaan verschillende soorten selectors:</p> Selector Soort voorbeeld Resultaat # id selector #blue-box het element met id \"blue-box\"wordt gestyled . class selector .red-box alle elementen met class \"red-box\"worden gestyled element naam element selector p alle &lt;p&gt; elementenworden gestyled"},{"location":"css/#voorbeeld-met-selectors","title":"Voorbeeld met selectors","text":"<p>index.html<pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;p&gt;Now begins the era of The Boxes!&lt;/p&gt;\n  &lt;div id=\"blue-box\"&gt;Blue Box&lt;/div&gt;\n  &lt;div class=\"red-box\"&gt;Red Box 1&lt;/div&gt;\n  &lt;div class=\"red-box\"&gt;Red Box 2&lt;/div&gt;\n  &lt;div class=\"red-box\"&gt;Red Box 3&lt;/div&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> style.css<pre><code>* {\n  font-family: Verdana;\n}\n\np {\n  color: blue;\n  font-size: 30px;\n}\n\ndiv {\n  color: white;\n}\n\n#blue-box {\n  height: 100px;\n  width: 100px;\n  background-color: blue;\n}\n\n.red-box {\n  height: 100px;\n  width: 100px;\n  background-color: red;\n}\n</code></pre> Dit geeft het volgende in de Browser:</p> <p></p>"},{"location":"css/#cascading-trapsgewijs","title":"Cascading (trapsgewijs)","text":"<p>Je kan meerdere CSS stylesheets tegelijkertijd gebruiken in je HTML. Elk CSS bestand wordt door de Browser ingeladen in de volgorde waarin het bestand in de &lt;head&gt; voorkomt.</p> <p>De styles worden daarna gestapeld, dat wil zeggen dat als een style met dezelfde naam voorkomt dat dan de styling wordt uitgebreid met die style. </p> <p>Het wordt duidelijker met een voorbeeld:</p> <p>style1.css<pre><code>#blue-box {\n  background-color: blue;\n}\n</code></pre> style2.css<pre><code>#blue-box {\n  height: 100px;\n  width: 100px;\n}\n</code></pre> style3.css<pre><code>#blue-box {\n  height: 150px;\n  width: 150px;\n  border: 2px solid black;\n}\n</code></pre> Als je deze styles in volgorde toevoegt aan je HTML wordt het resultaat:</p> <pre><code>#blue-box {\n  background-color: blue;\n  height: 150px;\n  width: 150px;\n  border: 2px solid black;\n}\n</code></pre> <p>De style #blue-box in style2.css voegt height en width toe aan de style in style1.css</p> <p>De style #blue-box in style3.css overschrijft de height en width uit style2.css met een andere waarde en voegt een border toe.</p>"},{"location":"css/#specificity","title":"specificity","text":"<p>Het stapelen (cascading) van styles in CSS volgt de regels van specificity. Deze regels bepalen welke styles voorrang krijgen:</p> <ul> <li> <p>!important styles hebben de hoogste specificity en krijgen altijd voorrang</p> </li> <li> <p>daarna krijgen de inline styles met dezelfde specificity voorrang</p> </li> <li> <p>daarna krijgen de id selectors (#) de voorrang</p> </li> <li> <p>daarna krijgen de class selectors (.) voorrang</p> </li> <li> <p>de element styles hebben de laagste specificity</p> </li> </ul>"},{"location":"css/#important","title":"!important","text":"<p>Als je !important achter een style zet dan overschrijft die style alle andere styles, ongeacht de volgorde:</p> <p><pre><code>#blue-box {\n  height: 100px !important;\n  width: 100px !important;\n}\n</code></pre> De height en width zullen nu altijd 100px zijn, ongeacht wat andere styles defini\u00ebren.</p>"},{"location":"css/#inheritance","title":"inheritance","text":"<p>Sommige style properties werken door naar van parent- naar child elements. Een parent is bijvoorbeeld een &lt;div&gt; element, en een child is de tekst in die &lt;div&gt;</p> <p><pre><code>&lt;style&gt;\n  .song-title {font-size: 30px;}\n&lt;/style&gt;\n\n&lt;div class=\"song-title\"&gt; &lt;!-- parent element --&gt;\n  Que Sera, Sera &lt;!-- child element --&gt;\n&lt;/div&gt;\n</code></pre> Nu werkt de style property font-size van de parent door op de child.</p> <p>Niet alle properties worden automatisch overge\u00ebrfd van de parent. In deze lijst zie je welke properties wel en welke niet worden overge\u00ebrfd.</p> <p>Als een property niet automatisch wordt overge\u00ebrfd van de parent kan je dit toch forceren met de inherit value:</p> <p><pre><code>&lt;style&gt;\n  .song-title {font-size: 30px; padding: 20px;}\n  .song-title-text {padding: inherit}\n&lt;/style&gt;\n\n&lt;div class=\"song-title\"&gt;\n  &lt;div class=\"song-title-text\"&gt;\n    Que Sera, Sera\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> De padding property van .song-title zal niet automatisch ge\u00ebrfd worden door de .song-title-text child. Maar we forceren de inheritance zodat de child automatisch de padding van de parent gebruikt.</p>"},{"location":"editors/","title":"Editors","text":""},{"location":"editors/#editors-cheat-sheet","title":"Editors Cheat Sheet","text":""},{"location":"editors/#het-gereedschap-van-de-programmeur","title":"Het gereedschap van de programmeur","text":"<p>Het gereedschap van de programmeur is de Editor. Editors zijn er in allerlei soorten en maten. Een uitgebreide editor noem je een IDE, een Integrated Development Environment. Een IDE is meer dan een editor, je kan er vaak ook mee runnen en debuggen.</p> <p>Hier is een lijst met populaire IDE's voor Windows en Mac</p> Editor Beschrijving Visual Studio Code Gratis IDE van Microsoft.Geschikt voor meerdere talen. Intellij IDE van JetBrains. Gratis voor studenten.Geschikt voor meerdere talen. Er zijn meerdere speciale IDE's van JetBrains beschikbaar voor bijvoorbeeld PHP, HTML/CSS/JavaScript, Android, etc.Vraag je gratis licentie aan via: JetBrains Student License Visual Studio De grote broer van Visual Studio Code. Geschikt voor .NET development. Gratis Community Edition."},{"location":"editors/#veelgebruikte-functies-in-veelgebruikte-editors","title":"Veelgebruikte functies in veelgebruikte editors","text":"<p>De gevorderde programmeur gebruikt keyboard shortcuts om te programmeren. Hier is een lijst met veelgebruikte shortcuts</p> Functie IntelliJ Visual Studio vscode Sublime Xcode (Mac) Vim Duplicate line     Ctrl-D     Ctrl+C;Ctrl+V     Ctrl+C;Ctrl+V <p> Shift+Alt + Arrow keys     Ctrl+Shift+D     yyp     Delete line     Ctrl+Y     Shift+Del, Ctrl+X     Shift+Del, Ctrl+X     Ctrl+X     cmd+delete     dd     Move line up/down     Shift+Alt+Up/Down     Alt+Up/Down     Alt+Up/Down     Ctrl+Shift+Up/Down     cmd+opt+[/]     ddp <p> ddkP     Select line         Ctrl+L     Ctrl+L     cmd+shift+-&gt;     shift + v     Intention Action     Alt+Enter     Ctrl+.     Ctrl+.     Show usage     Ctrl + mouse hover     Shift+F12     option+LClick     Go to declaration     F12     F12     Rename     Shift+F6     Ctrl+R;Ctrl+R     F2     Fontsize groter/kleiner     Ctrl+Mousewheel     Ctrl+Shift+. <p> Ctrl+Shift+, <p> Ctrl+Mousewheel     Ctrl+Shift+. <p> Ctrl+Shift+, <p> Ctrl+Mousewheel (settings: Mouse Wheel Zoom)     Ctrl+= en Ctrl+- <p> Ctrl + Mouse Scroll     CMD+ +/-     Make project     Ctrl+F9     Ctrl+Shift+B     cmd+shift+B     Run     Shift+F10     F5     F5     cmd+r     Debug     Shift+F9     F5     F5     Step over     F8     F10     F10     F6     Step into     F7     F11     F11     F7     Step out     Shift+F8     Shift+F11     Shift+F11     F8     Continue     F9     F5     F5     opt+cmd+Y     Format Code     Ctrl+Alt+L     Ctrl+K, Ctrl+D     Shift+Alt+F     Surround with     Ctrl+Alt+T     Ctrl+K;Ctrl+S     Line comment //     Ctrl+/     Ctrl+K, Ctrl+C <p> Ctrl+K, Ctrl+U     Ctrl+/     Ctrl+/     cmd+/     Block comment /*  */     Ctrl+Shift+/     Ctrl+Shift+/  <p> (met Resharper)     Shift+Alt+A     Ctrl+Shift+/     -     Column select     Shift+Alt+Ins     New line on current line     Shift+Enter     Open Settings     Ctrl+     Open Terminal     Ctrl+`     Open Command Palette     Ctrl+Shift+P     Split Window     Alt+H (horizontal) <p> Alt+V (vertical)     Ctrl+ \\ (vertical)"},{"location":"html/","title":"HTML","text":""},{"location":"html/#html-cheat-sheet","title":"HTML Cheat sheet","text":""},{"location":"html/#hypertext-markup-language","title":"HyperText Markup Language","text":"<p>Dat is waar de afkorting HTML voor staat. Markup wil zeggen dat we speciale markeringen (tags) gebruiken om het document vorm te geven in de Browser.</p> <p>HTML code is platte tekst. Met andere woorden gewoon alleen maar tekst. Net als alle andere broncode (source code).</p> <p>De eerste versie van HTML is in 1993 ontstaan, de laatste versie is HTML5 en bestaat sinds 2014. Voorlopig komt er geen HTML6. HTML5 zal zich blijven aanpassen aan de nieuwe ontwikkelingen op het web. De ontwikkelingen van HMTL5 kan je hier volgen: WHATWG HTML Living Standard. </p>"},{"location":"html/#bronnen","title":"Bronnen","text":"<p>Buiten deze Cheat Sheet om zijn hier nog een paar interessante sites met informatie over HTML</p> Site Beschrijving w3schools HTML Tutorial Veel voorbeelden en een mooie tryit editor om code uit te proberen. Codecademy Overzichtelijk opgebouwde informatie in categori\u00ebn over HTML WhatWG Offici\u00eble documentatie bijgewerkt met de nieuwste ontwikkelingen in HTML5"},{"location":"html/#doctype-html","title":"&lt;!DOCTYPE html&gt;","text":"<p>Een HTML document start altijd met &lt;!DOCTYPE html&gt; Dit is geen onderdeel van de code maar hieraan herkent de browser dat we met html te maken hebben.</p>"},{"location":"html/#tags","title":"Tags","text":"<p>HTML code wordt geschreven binnen tags. Een tag heeft een begin en een eind. De combinatie van begintag en eindtag wordt een html element genoemd.</p> <p>Bijvoorbeeld de begintag voor een kopje is &lt;h1&gt;, en de eindtag is &lt;/h1&gt; tussen de begintag en de eindtag komt de tekst van de kop. Dus zo:</p> <p><pre><code>&lt;h1&gt;Welkom bij mijn site&lt;/h1&gt;\n</code></pre> En zo werkt het met de meeste andere elementen.</p>"},{"location":"html/#attributen","title":"Attributen","text":"<p>Een tag kan attributen hebben. Een attribuut vertelt iets over de tag. Bijvoorbeeld de tag &lt;html&gt; kan een attribuut lang hebben waarmee wordt aangegeven in welke taal de tekst van de html pagina is geschreven. Dit is nuttige informatie voor de Browser.</p> <p>Dat ziet er dan zo uit:</p> <p><pre><code>&lt;html lang=\"en\"&gt;&lt;html\\&gt;\n</code></pre> Een attribuut heeft altijd de vorm: naam=\"waarde\" Dus hierboven is de attribuutnaam lang en de waarde is en</p>"},{"location":"html/#basis-opmaak","title":"Basis opmaak","text":"<p>Een basis html document bestaat uit de tags &lt;html&gt; en &lt;body&gt;:</p> <p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n  &lt;h1&gt;Welkom bij mijn site&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> In de body komt de rest van de html code. Alleen wat in de body staat wordt zichtbaar in de Browser.</p>"},{"location":"html/#de-head-head","title":"De head &lt;head&gt;","text":"<p>Een html document heeft meestal ook een head. In de head staat informatie over het html document. Je ziet de head niet in de Browser, maar de Browser gebruikt de head wel om speciale dingen over het document te weten te komen.</p> <p>Verwar de &lt;head&gt; niet met het element &lt;header&gt;, dat je in de body kunt zetten om bijvoorbeeld een inleiding voor je pagina te schrijven.</p> <p>De volgende elementen kunnen in de head staan:</p> Element Gebruik &lt;title&gt; De title van het document, zie je terug in de tab van de Browser &lt;style&gt; CSS styles die op de pagina gelden &lt;meta&gt; Algemene informatie &lt;link&gt; Een link naar een ander bestand, bijvoorbeeld JavaScript of CSS &lt;script&gt; Een stukje JavaScript code"},{"location":"html/#links","title":"Links","text":"<p>Links, of hyperlinks, zijn klikbare text die naar een andere HTML pagina leiden. Je maakt ze met de &lt;a&gt; tag en de href attribuut.</p> <p><pre><code>&lt;a href=\"https://www.w3schools.com/tags/tag_a.asp\"&gt;W3 Schools over links&lt;/a&gt;\n</code></pre> Een link krijgt verschillende kleuren afhankelijk van of erop geklikt is of niet.</p> Status Kleur Niet geklikt De links is blauw Geklikt De links is paars Actief De links is rood"},{"location":"html/#vscode-html5-basis-genereren","title":"vscode html5 basis genereren","text":"<p>Met Visual Studio Code kan je snel de basis voor een html5 document genereren. Type html, kies html5 en Enter</p> <p> </p> <p>Op dezelfde manier kan je allerlei html code laten genereren. Type het begin van de html markup die je nodig hebt en kies uit het menu.</p>"},{"location":"html/#lorem-ipsum","title":"Lorem ipsum","text":"<p>Lorem ipsum is een een tekst die gebruikt wordt als placeholder voor echte tekst. Als je nog niet weet welke tekst er moet komen, maar wel alvast wat wilt laten zien, gebruik je de Lorem ipsum tekst. De tekst is gebaseerd op een tekst uit de oudheid, maar aangepast zodat er eigenlijk onzin staat.</p> <p>Visual Studio Code heeft een ingebouwde Lorem ipsum generator. Type \"Lorem\" en Enter en je krijg een lange onzin tekst.</p>"},{"location":"html/#kopjes-headings","title":"Kopjes (Headings)","text":"<p>Om een koptekst te maken gebruik je de &lt;h1&gt; tot en met de &lt;h6&gt; tags. &lt;h1&gt; is de grootste kop en &lt;h6&gt; de kleinste.</p> <pre><code>&lt;h1&gt;Welkom op mijn profielpagina&lt;/h1&gt;\n&lt;p&gt;Lorem ipsum dolor sit amet&lt;/p&gt;\n\n&lt;h2&gt;Over mij&lt;/h2&gt;\n&lt;p&gt;Lorem ipsum dolor sit amet&lt;/p&gt;\n\n&lt;h3&gt;Werkervaring&lt;/h3&gt;\n&lt;p&gt;Lorem ipsum dolor sit amet&lt;/p&gt;\n</code></pre>"},{"location":"html/#paragrafen","title":"Paragrafen","text":"<p>Het &lt;p&gt; element maakt een paragraaf van je tekst. Boven en onder de paragraaf wordt witruimte overgelaten. <pre><code>&lt;p&gt;\nLorem ipsum dolor sit amet\n&lt;/p&gt;\n</code></pre></p>"},{"location":"html/#div","title":"Div","text":"<p>Het &lt;div&gt; element wordt vaak gebruikt om andere elementen in te zetten, als een container. Je kan het div element dan stylen om bijvoorbeeld een kader toe te voegen. </p> <p>De &lt;p&gt; en de &lt;div&gt; zien er hetzelfde uit als je er tekst in zet. Het verschil is dat je in een &lt;p&gt; meestal alleen tekst zet en in een &lt;div&gt; ook vaak andere elementen.</p> <p>divs nemen standaard de volle breedte van de pagina in. Er zit een lege regel aan de boven- en onderkant.</p> <pre><code>&lt;h1&gt;Wobbuffet&lt;/h1&gt;\n\n&lt;p&gt;Wobbuffet is een Psychic Pokemon. Hij is kwetsbaar voor Bug, Ghost en Dark.&lt;/p&gt;\n\n&lt;div class=\"note\"&gt;\n  Wobbuffet heeft een zwarte staart. Er schijnt een geheim achter te schuilen.\n&lt;/div&gt;\n</code></pre>"},{"location":"javascript/","title":"Javascript","text":""},{"location":"javascript/#javascript-cheat-sheet","title":"JavaScript Cheat sheet","text":""},{"location":"laravel/","title":"Laravel","text":""},{"location":"laravel/#laravel-cheat-sheet","title":"Laravel Cheat Sheet","text":""},{"location":"laravel/#het-laravel-framework","title":"Het Laravel Framework","text":"<p>Laravel is een populair PHP framework waarmee je snel een complete en veilige applicatie voor het web kunt maken. Iedere twee jaar verschijnt er een nieuwe versie van het framework. Laravel kan gecombineerd worden met diverse JavaScript frameworks zoals VUE en React. Met Laravel Breeze (Tailwind CSS) of Laravel UI (Bootstrap CSS) kan je snel een compleet gebruikerssysteem met authorisatie toevoegen.</p>"},{"location":"laravel/#bronnen","title":"Bronnen","text":"<p>Buiten deze Cheat Sheet om zijn hier nog een paar interessante sites met informatie over Laravel</p> Site Beschrijving Laravel Tutorials Links naar betrouwbare Laravel tutorials Laracasts Tutorials en een uitgebreid forum om vragen in te stellen of antwoorden te vinden Laravel Docs Offici\u00eble documentatie. Let op dat je in de juiste versie van de documentatie kijkt, rechtsbovenin kan je de benodigde versie kiezen."},{"location":"laravel/#benodigdheden","title":"Benodigdheden","text":""},{"location":"laravel/#composer","title":"Composer","text":"<p>Composer is de package manager voor PHP. Hiermee kan je PHP packages/libraries eenvoudig installeren.</p> <p>Download Composer voor je eigen OS en installeer:</p> <p>https://getcomposer.org/download/</p>"},{"location":"laravel/#nodejs","title":"Node.js","text":"<p>Node.js is een JavaScript runtime environment. Met Node.js kan je JavaScript gebruiken buiten de Browser om. Dit is nodig om JavaScript onderdelen binnen de Laravel applicatie te gebruiken.</p> <p>Download Node.js voor je eigen OS en installeer:</p> <p>https://nodejs.org/en/download</p>"},{"location":"laravel/#php-82","title":"PHP 8.2+","text":"<p>Voor Laravel 11 heb je minimaal PHP 8.2 nodig. Download en installeer PHP voor jouw OS.</p>"},{"location":"laravel/#extra-tools","title":"Extra tools","text":"<p>Composer, Node.js en PHP heb je minimaal nodig. Maar voor veel applicaties heb je ook een Database nodig. Laravel werkt met diverse databases zoals SQLite, MySQL/MariaDB, PostgresSQL. Een populaire keuze is MySQL/MariaDB.</p> <p>Als IDE werkt Visual Studio Code prima. Een andere veelgebruikte IDE voor Laravel is PHPStorm of IntelliJ.</p> <p>Een Database Manager is handig om je databases mee te beheren. PHPMyAdmin een optie, maar voor een upgrade in gebruikersgemak gebruik je en van onderstaande opties.</p> <p>Een veelgebruikte tool is DataGrid van Jetbrains. DataGrid is ook geintegreerd aanwezig in PHPStorm en IntelliJ. Voor VS Code zijn er plugins beschikbaar waarmee je de database kan beheren. </p>"},{"location":"laravel/#een-nieuw-laravel-project-maken","title":"Een nieuw Laravel project maken","text":"<p>Als je PHP, Composer en Node.js heb ge\u00efnstalleerd, open je een nieuwe terminal. Navigeer naar de directory waar je het project wilt bewaren. Bedenk een naam voor je project. In de voorbeelden gebruiken we als naam my-app.</p> <p>Type in de terminal het volgende commando:</p> <pre><code>composer create-project laravel/laravel my-app\n</code></pre> <p>Er wordt nu een basis Laravel applicatie gemaakt in de map 'my-app'. Navigeer naar deze nieuwe map:</p> <pre><code>cd my-app\n</code></pre> <p>De root directory</p> <p>Vanaf nu voer je alle commando's voor je applicatie uit in de root directory van de applicatie. Dit is in het voorbeeld dus de 'my-app' directory. Zorg ervoor dat alle terminals die je gebruikt altijd in deze directory staan, anders werken de commando's niet.</p>"},{"location":"laravel/#database-instellingen-in-env","title":"Database instellingen in .env","text":"<p>Start je IDE (VSCode of een andere IDE) en open de map met de applicatie. Ga op zoek naar het bestand '.env' en open dit bestand in de IDE. In het bestand .env staan de basisinstellingen voor je applicatie. Een van die instellingen is welke database je wilt gebruiken. Standaard is dit SQLite. Als je bijvoorbeeld MySQL/MariaDB gebruikt dan moet je nu de inloggegevens voor in .env toevoegen.</p> <p>Pas voor MySQL de volgende regels aan en vervang de waarden met de inloggegevens voor jouw database:</p> <p><pre><code>DB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=myapp\nDB_USERNAME=myapp_admin\nDB_PASSWORD=secretpassword\n</code></pre> Hierna voer je het onderstaande commando uit in een terminal in de map 'my-app':</p> <p><pre><code>php artisan migrate\n</code></pre> Als de database myapp nog niet bestaat dan zal Laravel vragen of de database aangemaakt moet worden. Kies 'yes'. Nu worden de standaard tabellen 'users', 'cache' en 'jobs' aangemaakt in je database.</p>"},{"location":"laravel/#de-applicatie-gebruiksklaar-maken-en-starten","title":"De applicatie gebruiksklaar maken en starten","text":"<p>Open een nieuwe terminal in de map 'my-app' en voor het volgende commando uit:</p> <p><pre><code>npm install\n</code></pre> Hiermee installeer je de benodigde JavaScript packages.</p> <p>en daarna:</p> <pre><code>npm run dev\n</code></pre> <p>Hiermee start je de Vite development server. Door dit commando in de achtergrond actief te houden worden wijzigingen in JavaScript en CSS automatisch verwerkt en krijg je  hot reload functionaliteit. Daardoor hoef je de Browser niet te verversen om je wijzigingen te zien.</p> <p>Open opnieuw een terminal en run het volgende commando:</p> <pre><code>php artisan serve\n</code></pre> <p>Hiermee start je de Laravel development server. Je kunt je nieuwe Laravel app nu bekijken door met de Browser het adres http://localhost:8000 te bezoeken.</p> <p>De applicatie blijft actief zolang je het commando php artisan serve in de terminal actief laat. Sluit deze terminal dus niet. Je kan de terminal van je OS gebruiken of een terminal in je IDE.</p> <p>Er zijn nog andere opties om een Laravel ontwikkelomgeving op te zetten en de applicatie te runnen. Check hiervoor:  https://laravel.com/docs/11.x/installation</p>"},{"location":"laravel/#een-user-systeem-toevoegen","title":"Een user systeem toevoegen","text":"<p>Er bestaan twee Laravel packages waarmee je een usersysteem kan toevoegen aan je applicatie. De nieuwste tool is Breeze, hiermee wordt een usersysteem met Tailwind CSS gemaakt.</p> <p>De Laravel-ui package bevat boilerplate code voor een basis registratie- en login systeem. Je kunt Laravel-ui Bootstrap als CSS laten gebruiken. Die optie bestaat niet voor Breeze </p> <p>Kies een van de twee packages, afhankelijk van je eigen voorkeur.</p> <p>Ga terug naar de terminal vanwaaruit je de applicatie hebt gestart en run de volgende commando's en beantwoord vragen om bestanden te overschrijven met 'yes':</p>"},{"location":"laravel/#laravel-ui-met-bootstrap","title":"Laravel UI (met Bootstrap)","text":"<pre><code>composer require laravel/ui\nphp artisan ui bootstrap --auth\nnpm install\n</code></pre>"},{"location":"laravel/#laravel-breeze-met-tailwind","title":"Laravel Breeze (met Tailwind)","text":"<pre><code>composer require laravel/breeze\nphp artisan breeze:install\nnpm install\n</code></pre> <p>Hiermee wordt een kant en klaar gebruikerssysteem ge\u00efnstalleerd.</p> <p>Omdat er nieuwe tabellen in de database nodig zijn voor het gebruikerssysteem, moet je nogmaals het artisan migrate commando uitvoeren:</p> <pre><code>php artisan migrate\n</code></pre> <p>De Laravel applicatie moet nu een functionerend registratie- en loginsysteem hebben. Je kan het zelf uitbreiden met bijvoorbeeld een rollensysteem. De gebruikers worden opgeslagen in de tabel 'users'.</p>"},{"location":"laravel/#de-ontwikkelomgeving","title":"De ontwikkelomgeving","text":"<p>Om snel en goed met Laravel te werken is een IDE een must! Gebruik bijvoorbeeld Visual Studio Code of PHPStorm. Je IDE heeft ook terminals ingebouwd die je kan gebruiken om je Laravel app te besturen.</p> <p>Je gebruikt drie terminals. Alledrie moeten geopend staan in de root van je applicatie folder. </p> <p>De eerste terminal gebruik jijzelf om bijvoorbeeld artisan commando's uit te voeren.</p> <p>De tweede terminal draait een ontwikkelomgeving voor de JavaScript onderdelen via het commando 'npm run dev'. Bovendien geeft dit commando je een hot reload, waardoor je wijzigingen direct terugziet in de Browser.</p> <p>De derde terminal draait de Laravel ontwikkelomgeving inclusief een ingebouwde webserver om de applicatie te serveren. Het commando voor deze terminal is 'php artisan serve', en de applicatie is te vinden op url: http://localhost:8000</p>"},{"location":"laravel/#artisan","title":"Artisan","text":"<p>Artisan is de command line tool van Laravel. Met Artisan beheer je je Laravel applicatie. Je kunt er boiler plate code mee genereren, de cache mee beheren, de database beheren en meer. </p> <p>Artisan is een PHP applicatie, dus je start artisan met 'php' ervooor, bijvoorbeeld: 'php artisan migrate'.</p>"},{"location":"laravel/#migrations","title":"Migrations","text":"<p>In Laravel worden tabellen in je database gedefinieerd door migration files. Dit zijn bestanden in de app/database/migrations map.</p> <p>Migrations worden uitgevoerd met het artisan migrate commando.</p> <p>Het aanmaken van een nieuwe tabel bestaat uit de volgende stappen:</p> <ul> <li>Maak met artisan een migration bestand voor je tabel</li> <li>Definieer de kolommen in de up() function</li> <li>Voer de migration uit met artisan</li> </ul> <p>Je kunt eenmaal uitgevoerde migrations ongedaan maken met arstisan migrate:rollback. Hieronder staan een paar van de meest gebruikte artisan migrate commando's:</p> Commando Beschrijving php artisan make:migration create_students_table Maak een nieuwe migratie, in dit voorbeeld voor de tabel met de naam 'students'. Je vindt het aangemaakte bestand terug in de map database/migrations php artisan migrate Voer alle openstaande migraties uit. Migraties die eerder al een keer zijn uitgevoerd worden niet opnieuw uitgevoerd. php artisan migrate:fresh Voer alle migraties uit. Ook de migraties die eerder al een keer zijn uitgevoerd worden opnieuw uitgevoerd. php artisan migrate:rollback Maak de laatste migratie ongedaan. Je kunt rollback steeds opnieuw uitvoeren totdat alle migraties zijn teruggedraaid php artisan migrate:reset Maak alle uitgevoerde migraties ongedaan. De database wordt leeggemaakt. php artisan migrate:status Je krijgt een overzicht van de status van de migraties. <p>Raadpleeg de Laravel database documentatie voor meer database en migrate commando's.</p>"},{"location":"laravel/#models-views-controllers","title":"Models, Views, Controllers","text":"<p>In Laravel werk je met het MVC design pattern, Model, View, Controller. Eerst even in het kort waar deze termen voor staan:</p>"},{"location":"laravel/#model","title":"Model","text":"<p>Een model is de 'brug' naar een tabel in de database. Via het model in Laravel kan je veel database acties, zoals het toevoegen, wijzigen of verwijderen van records, eenvoudiger uitvoeren.</p>"},{"location":"laravel/#view","title":"View","text":"<p>Een view is een pagina in je applicatie waar de informatie uit een of meerdere tabellen getoond wordt. Views bestaand uit een mix van HTML code en Blade template code.</p>"},{"location":"laravel/#controller","title":"Controller","text":"<p>De controller is de schakel tussen het Model en de View. Een controller bestaat vaak uit standaard functies waarmee je CRUD functionaliteit bouwt.</p> <p>CRUD</p> <p>CRUD staat voor Create, Read, Update en Delete. Dit zijn de standaard acties die je nodig hebt om een tabel te bewerken.</p> <p>Je kan met artisan een Resource Controller laten aanmaken die alle functies bevat die nodig zijn voor je CRUD:</p> <p><pre><code>php artisan make:controller StudentController --resource\n</code></pre> Je krijgt nu een bestand met de functies index, create, store, show, edit, update, destroy. Je moet zelf nog de benodigde code in deze functies maken.  </p>"},{"location":"laravel/#artisan-commandos-voor-mvc","title":"Artisan commando's voor MVC","text":"<p>Je kan met Artisan boiler plate code voor Models, Views en Controllers laten aanmaken. Hieronder staan een paar veelgebruikte artisan commando's die je hiervoor kan gebruiken.</p> Commando Beschrijving Aangemaakte bestand(en) php artisan make:model Student Maak een Model voor de tabel students app/Models/Student.php php artisan make:model Student --seed Maak een model voor de tabel students en een seeder app/Models/Student.phpdatabase/seeders/StudentSeeder.php php artisan make:controller StudentController Maak een controller voor de tabel students app/Http/Controllers/StudentController.php php artisan make:controller StudentController --resource Maak een resource Controller voor de tabel students app/Http/Controllers/StudentController.php php artisan make:model Student -mcr Maak een Model, een Resource Controller en een Migration voor de tabel students app/Models/Student.phpdatabase/migrations/(..)_create_students_table.phpapp/Http/Controllers/StudentController.php php artisan make:view student Maak een View voor de tabel students resources/views/student.blade.php php artisan make:model Student -mcrsf Het meest complete commando. Cre\u00ebert een Model, een Resource Controller, een Migration, een Seeder, en een Factory.Voeg zelf nog de benodigde Views toe en je bent compleet. app/Models/Student.phpdatabase/factories/StudentFactory.phpdatabase/migrations/(...)_create_students_table.phpdatabase/seeders/StudentSeeder.phpapp/Http/Controllers/StudentController.php"},{"location":"laravel/#laravel-naming-conventions","title":"Laravel Naming Conventions","text":"<p>Laravel volgt de PSR-2/PSR-12 standaard. Een set met coding style standaarden voor PHP.</p> <p>Hieronder staan alvast enkele belangrijke regels die je kunt volgen.  </p> <p>Models en Controllers worden met PascalCase geschreven, elk woord begint met een hoofdletter. Dus bijvoorbeeld StudentController. </p> <p>Models en Controllers worden altijd in enkelvoud geschreven. Dus Student.php en niet Students.php</p> <p>Tabellen worden in snake_case geschreven en in het meervoud. Dus bijvoorbeeld student_grades. </p> <p>Variabelen worden in camelCase geschreven. Dus bijvoorbeeld studentGrade = 10;</p>"},{"location":"laravel/#convention-over-configuration","title":"Convention over Configuration","text":"<p>Hoe beter je de Laravel standaarden volgt, hoe beter Laravel je kan helpen met automatische configuratie en acties, dit wordt convention over configuration genoemd.</p> <p>Twee voorbeelden van convention over configuration: </p> <p>Als je een Model maak met de naam Student, dan hoef je Laravel niet meer te vertellen dat de bijbehorende tabel students is. Laravel gaat ervan uit dat de tabel die bij een Model hoort geschreven is in de Engelse meervoudsvorm van het Model.(Deze convention werkt trouwens niet lekker als je Nederlandse namen voor tabellen gebruikt.) </p> <p>Als je in een migration een kolom met de naam \"id\" toevoegt, dan gaat Laravel ervan uit dat dit de primary key van die tabel is.</p>"},{"location":"laravel/#primary-keys-en-foreign-keys-in-migrations","title":"Primary Keys en Foreign Keys in Migrations","text":""},{"location":"laravel/#primary-key","title":"Primary key","text":"<p>Als je de primary key \"id\" noemt dan zal Laravel in de tabel deze kolom als primary key met een auto-increment aanmaken:</p> (...)_create_students_table.php<pre><code>Schema::create('students', function (Blueprint $table) {\n    $table-&gt;id(); // Er wordt automatisch een unsigned bigint met auto-increment aangemaakt\n});\n</code></pre>"},{"location":"laravel/#foreign-keys","title":"Foreign Keys","text":"<p>Als je een foreign key aanmaakt met 'id' en de naam van de gerelateerde tabel ervoor, dan weet Laravel hoe deze relatie werkt.</p> (...)_create_lessons_table.php<pre><code>        Schema::create('lessons', function (Blueprint $table) {\n            $table-&gt;id();\n            $table-&gt;foreignId('student_id')-&gt;constrained();    // foreign key naar de tabel students\n            $table-&gt;timestamps();\n        });\n</code></pre> <p>De -&gt;constrained() zorgt ervoor dat in de tabel een constrained wordt aangemaakt. Dit zorgt ervoor dat je niet per ongeluk een student kan verwijderen als er nog een lesson met die student bestaat.</p>"},{"location":"laravel/#seeders-en-factories","title":"Seeders en Factories","text":"<p>Om je applicatie goed te kunnen testen heb je testgegevens nodig. Laravel geeft de mogelijkheid om die testgegevens voor je te genereren. Hierbij gebruik je Seeders en Factories.</p>"},{"location":"laravel/#seeders","title":"Seeders","text":"<p>Met Seeders kan je snel een hoeveelheid testgegevens voor je applicatie genereren. Gebruik artisan om de boiler plate code voor een Seeder te genereren:</p> <pre><code>php artisan make:seeder StudentSeeder\n</code></pre>"},{"location":"laravel/#factories","title":"Factories","text":"<p>Met Factories kan je Nep gegevens laten genereren, zoals namen, datums, nummers etc. Hiervoor gebruik je de standaard meegeleverde package Faker.</p> <p>Een Factory gebruik je vaak in combinatie met een Seeder.</p> <p>Gebruik artisan om de boiler plate code voor een Factory te genereren:</p> <pre><code>php artisan make:factory StudentFactory\n</code></pre> <p>Voorbeeld van een eenvoudige Factory voor de tabel student:</p> StudentFactory.php<pre><code>class StudentFactory extends Factory\n{\n    public function definition(): array\n    {\n        return [\n            'first_name' =&gt; fake()-&gt;firstName(),\n            'last_name' =&gt; fake()-&gt;lastName(),\n            'email' =&gt; fake()-&gt;unique()-&gt;safeEmail(),\n            'studentnumber' =&gt; fake()-&gt;unique()-&gt;numberBetween(10000, 999999),\n        ];\n    }\n}\n</code></pre>"},{"location":"laravel/#seeder-uitvoeren","title":"Seeder uitvoeren","text":"<p>Om een specifieke Seeder uit te voeren gebruik je onderstaand artisan commando. In het voorbeeld wordt de Seeder voor de tabel student uitgevoerd:</p> <pre><code>php artisan db:seed --class=StudentSeeder\n</code></pre> <p>Je kunt ook een reeks Seeders in een keer uitvoeren. Je voegt dan de benodigde Seeders toe in het bestand 'DatabaseSeeder.php' en voert het onderstaande artisan commando uit:</p> <pre><code>php artisan db:seed\n</code></pre> <p>Voorbeeld van een DatabaseSeeder.php die 10 studenten aanmaakt:</p> DatabaseSeeder.php<pre><code>class DatabaseSeeder extends Seeder\n{\n    public function run(): void\n    {\n        Student::factory(10)-&gt;create();\n    }\n}\n</code></pre>"},{"location":"laravel/#routes","title":"Routes","text":"<p>Routes zijn url's in je applicatie waarmee de gebruiker naar de diverse beschikbare pagina's kan navigeren. Zonder een route naar een pagina is die pagina niet beschikbaar.</p> <p>Routes worden gedefinieerd in het bestand web.php. Meestal wil je dat een route verwijst naar een functie in een Controller. Die functie gaat dan de benodigde acties uitvoeren om de pagina met de juiste gegevens te laten zien.</p> <p>Hieronder staat een voorbeeld van een route naar de index functie van de StudentController:</p> web.php<pre><code>Route::get('/students', [App\\Http\\Controllers\\StudentController::class, 'index']);\n</code></pre> <p>In plaats van voor iedere functie in een controller een aparte route te definieren, kan je ook een resource route gebruiken. Een resource route maakt achter de schermen in \u00e9\u00e9n keer routes voor alle functies van een resource controller:</p> web.php<pre><code>Route::resource('students', App\\Http\\Controllers\\StudentController::class);\n</code></pre> <p>Deze route maakt achter de schermen routes voor de functies in je resource controller: index, create, store, show, edit, update en destroy</p>"},{"location":"laravel/#views","title":"Views","text":"<p>Views zijn de pagina's waarmee je de gebruiker de gegevens van je applicatie kan laten zien en laten bewerken. Views bestaan uit een combinatie van HTML code en Blade template code.</p> <p>Een View wordt aangeroepen vanuit een Controller en krijgt van de controller functie de gegevens mee om te laten zien of te laten bewerken.</p> <p>Views worden opgeslagen in de resource/views folder. Het is gebruikelijk om voor elke tabel waarvoor je Views wilt maken een subdirectory te maken. De Views voor de tabel students staat dan in de folder resources/views/student</p> <p>Hieronder staat een voorbeeld van de index function uit StudentController:</p> <p>StudentController.php<pre><code>public function index()\n{\n  $students = Student::all();\n  return view('student.index', ['students' =&gt; $students]);\n}\n</code></pre> Op regel 3 worden alle studenten uit de database opgehaald. Hiervoor wordt het Model Student gebruikt.</p> <p>Op regel 4 wordt de index View teruggegeven zodat die aan de gebruiker getoond kan worden. De view krijgt de opgehaalde studenten meegestuurd.</p> <p>De volledige bestandsnaam van de index View is index.blade.php, maar je hoeft alleen maar 'index' te schrijven. En omdat de View in de subdirectory 'resources/views/student' staat schrijf je dus 'student.index'</p> <p>Je kan in plaats van ['students' =&gt; $students] ook de handige functie compact() gebruiken. Het resultaat is hetzelfde:</p> StudentController.php<pre><code>public function index()\n{\n  $students = Student::all();\n  return view('student.index', compact('students'));\n}\n</code></pre> <p>En hier is dan de voorbeeld code voor de View 'index':</p> index.blade.php<pre><code>&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        &lt;td&gt;First Name&lt;/td&gt;\n        &lt;td&gt;Last Name&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        @foreach($students as $student)\n            &lt;tr&gt;\n                &lt;td&gt;{{$student-&gt;first_name}}&lt;/td&gt;\n                &lt;td&gt;{{$student-&gt;last_name}}&lt;/td&gt;\n            &lt;/tr&gt;\n        @endforeach\n    &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre> <p>Het is een eenvoudige HTML Table. In de body van de table wordt Blade template code gebruikt om met een loop alle studenten te laten zien.</p> <p>De studenten staan in de variabele $students. Dit is een array met studenten die door de controller functie is opgehaald en aan de view is doorgegeven.</p> <p>Je kan de Blade template code herkennen aan het '@' teken dat altijd voor de instructie staat. In bovenstaand voorbeeld wordt de Blade functie @foreach() gebruikt om door de gegevens te lopen. De loop wordt afgesloten met een @endforeach. </p> <p>Op regel 11 en 12 zie je dat de first_name en last_name van de student in een &lt;td&gt; wordt gezet. De dubbele krulhaken zijn Blade code om aan te geven dat we de inhoud van de variabelen willen laten zien.</p>"},{"location":"linux/","title":"Linux","text":""},{"location":"linux/#linux-cheat-sheet","title":"Linux Cheat Sheet","text":"<p>Een Cheat Sheet met veelgebruikte commando's en tools in Linux</p> <p>Klik op de 'explainshell' links om uitvoerige informatie te krijgen over een commando</p>"},{"location":"linux/#packages-installeren-en-beheren-met-apt","title":"Packages installeren en beheren met apt","text":"<p>De Advanced Package Tool, apt, bestaat uit een aantal tools waarmee je in Debian en Ubuntu packages/programma's kan installeren. Andere Linux distributies kunnen andere tools gebruiken. Vaak zie je nog tutorials waarin apt-get wordt gebruikt in plaats van apt. apt is de nieuwe versie van apt-get.</p>"},{"location":"linux/#package-database-updaten","title":"Package database updaten","text":"<p><pre><code>apt update\n</code></pre> Hiermee haal je informatie op over de nieuwste versies van programma's</p>"},{"location":"linux/#nieuwe-versie-van-package-installeren","title":"Nieuwe versie van package installeren","text":"<p><pre><code>apt upgrade\n</code></pre> Hiermee installeer je de nieuwste versies van programma's. Doe altijd eerst een apt-get update en daarna een apt-get upgrade</p>"},{"location":"linux/#nieuwe-versie-van-linux-installeren","title":"Nieuwe versie van Linux installeren","text":"<p><pre><code>apt dist-upgrade\n</code></pre> Hiermee installeer je de nieuwste versies van de distributie.</p>"},{"location":"linux/#een-package-installeren","title":"Een package installeren","text":"<p><pre><code>apt install &lt;package-name&gt;\n</code></pre> Met apt-get install installeer je een programma. Bijvoorbeeld de Midnight Commander:</p>"},{"location":"linux/#een-package-verwijderen","title":"Een package verwijderen","text":"<p><pre><code>apt remove &lt;package-name&gt;\n</code></pre> Verwijder de binaries van de package, maar niet de configuratie bestanden</p>"},{"location":"linux/#een-package-verwijderen-en-opschonen","title":"Een package verwijderen en opschonen","text":"<p><pre><code>apt purge &lt;package-name&gt;\n</code></pre> Verwijder de binaries van de package en ook de bijbehorende configuratie bestanden</p>"},{"location":"linux/#ls-list","title":"ls (list)","text":"<p>Het list commando ls geeft een lijst van de files in een directory. </p> <pre><code>ls\n</code></pre> <p>Met verschillende switches/opties kan de lijst in allerlei formaten worden getoond. De switch -a toont bijvoorbeeld alle bestanden, ook de verborgen.</p> <pre><code>ls -a \n</code></pre> <p>De switch -l geeft meer informatie over de bestanden, zoals eigenaar, rechten, datum tijd</p> <pre><code>ls -l\n</code></pre> <p>Door ls te pipen naar andere commando\u2019s en tools kan je nog meer met de lijst doen:</p>"},{"location":"linux/#tel-het-aantal-bestanden-in-een-directory","title":"Tel het aantal bestanden in een directory","text":"<p><pre><code>ls | wc -l\n</code></pre> explainshell</p>"},{"location":"linux/#toon-de-10-nieuwste-bestanden-in-een-directory","title":"Toon de 10 nieuwste bestanden in een directory","text":"<p><pre><code>ls -lt | head -10\n</code></pre> explainshell</p>"},{"location":"linux/#toon-de-10-oudste-bestanden-in-een-directory","title":"Toon de 10 oudste bestanden in een directory","text":"<p><pre><code>ls -ltr | head -10\n</code></pre> explainshell</p>"},{"location":"linux/#df-disk-free","title":"df (disk free)","text":"<p>Het commando df, disk free, geeft een overzicht van disks en de gebruikte en vrije ruimte.  df kijk naar de gebruikte blocks op de disks. Met de switch -h toon je de grootte in MB en GB</p> <pre><code>df -h\n</code></pre>"},{"location":"linux/#du-disk-usage","title":"du (disk usage)","text":"<p>Het commando du, disk usage, doorloopt de bestanden in een directory en toont de grootte van de bestanden. du telt geen hardlinks en geen bestanden waar je geen rechten voor voor hebt.</p> <p>Met de switch --max-depth kan je aangeven hoe diep je in de directory boom wilt zoeken. max-depth=1 zoekt alleen in de hoofd directory</p> <p><pre><code>du -h --max-depth=1\n</code></pre> explainshell</p>"},{"location":"linux/#cat-concatenate","title":"cat (concatenate)","text":"<p>Met het commando cat kan je de inhoud van bestanden tonen in de console. </p> <p><pre><code>cat info.txt\n</code></pre> toont de inhoud van het bestand info.txt op het scherm</p> <p><pre><code>cat /proc/meminfo\n</code></pre> Toont het interne geheugengebruik</p>"},{"location":"linux/#man-manual","title":"man (manual)","text":"<p>Het commando man geeft informatie over een commando <pre><code>man cat\n</code></pre> Geeft uitgebreide informatie over het commando cat</p>"},{"location":"linux/#grep-zoeken-naar-tekst-in-een-bestand","title":"grep (zoeken naar tekst in een bestand)","text":"<p>Met grep kan je zoeken naar tekst in bestanden. Het command print de regels waarin het gezochte woord voorkomt naar de console</p> <p><pre><code>grep 'minecraft' index.html\n</code></pre> Zoekt naar het woord minecraft in het bestand index.html</p>"},{"location":"linux/#history","title":"history","text":"<p>Met de pijltjes up en down krijg je de commando\u2019s die je eerder hebt uitgevoerd in de shell terug.</p> <p>Met het commando history vraag je alle eerder uitgevoerde commando\u2019s op. Je krijgt een lijst met alle commando\u2019s die in de history zijn opgeslagen.</p> <p>Door grep te gebruiken op de output van history kan je eenvoudig zoeken naar een commando dat je eerder hebt uitgevoerd.</p> <p>Let op, gevoelige informatie zoals wachtwoorden wordt ook in de history opgeslagen. Daarom is het een goed gebruik om nooit wachtwoorden in commando\u2019s mee te geven. Als je toch gevoelige informatie in de history hebt staan kan je die beter weer verwijderen voordat je de shell verlaat.</p>"},{"location":"linux/#toon-de-history-met-de-regel-nummers","title":"Toon de history met de regel nummers","text":"<pre><code>history\n</code></pre>"},{"location":"linux/#zoek-naar-een-eerder-uitgevoerd-commando-in-history","title":"Zoek naar een eerder uitgevoerd commando in history","text":"<p><pre><code>history | grep cat\n</code></pre> Zoekt in de history naar commando's waarin het woord 'cat' voorkomt</p>"},{"location":"linux/#verwijder-een-regel-uit-history","title":"Verwijder een regel uit history","text":"<pre><code>history -d &lt;regelnum&gt;\n</code></pre>"},{"location":"linux/#verwijder-alles-uit-history","title":"Verwijder alles uit history","text":"<pre><code>history -c\n</code></pre>"},{"location":"linux/#voer-een-regel-uit-de-history-opnieuw-uit","title":"Voer een regel uit de history opnieuw uit","text":"<pre><code>!&lt;regelnum&gt;\n</code></pre>"},{"location":"linux/#processen","title":"Processen","text":""},{"location":"linux/#toon-een-lijst-met-processen-met-een-bepaalde-naam","title":"Toon een lijst met processen met een bepaalde naam","text":"<pre><code>ps -e | grep &lt;name&gt;\n</code></pre>"},{"location":"linux/#toon-geheugen-gebruik-per-process","title":"Toon geheugen gebruik per process","text":"<pre><code>ps -eo size,pid,user,command --sort -size | awk '{ hr=$1/1024 ; printf(\"%13.2f Mb \",hr) } { for ( x=4 ; x&lt;=NF ; x++ ) { printf(\"%s \",$x) } print \"\" }' |cut -d \"\" -f2 | cut -d \"-\" -f1\n</code></pre>"},{"location":"linux/#achtergrond-taken","title":"Achtergrond taken","text":"<p>Als je meerdere taken tegelijkertijd wilt uitvoeren in de terminal heb je een aantal opties. De eerste optie is gewoon een nieuwe terminal sessie openen. Maar wat als je even snel iets anders wilt doen terwijl je bijvoorbeeld een bestand aan het editen bent? Dan gebruik je Ctrl+z en fg:</p> <p><pre><code>Ctrl+z\n</code></pre> Stuurt het huidige programma (bijvoorbeel een editor) tijdelijk naar de achtergrond.</p> <p><pre><code>fg\n</code></pre> Type 'fg' als je klaar bent om het programma weer naar de voorgrond te brengen</p>"},{"location":"linux/#achtergrond-taken-met-screen","title":"Achtergrond taken met 'screen'","text":"<p>Een andere manier om programma\u2019s in de background uit te voeren is screen. Het voordeel van screen is dat programma\u2019s die in een screen sessie zijn gestart ook beschikbaar blijven als je de terminal sluit. Je kan altijd weer terug naar je screen sessies. Handig als je een langdurig proces wilt starten, maar niet de hele tijd de terminal open wilt houden.</p> <p>Screen is geen standaard package en moet je meestal wel nog installeren: apt-get install screen</p>"},{"location":"linux/#create-new-screen","title":"create new screen","text":"<pre><code>Ctrl+a+c\n</code></pre>"},{"location":"linux/#detatch-from-screen","title":"detatch from screen","text":"<pre><code>Ctrl+a+d\n</code></pre>"},{"location":"linux/#reatach-to-screen","title":"reatach to screen","text":"<pre><code>screen -r\n</code></pre>"},{"location":"linux/#switch-to-next-screen","title":"switch to next screen","text":"<pre><code>Ctrl+a+n\n</code></pre>"},{"location":"linux/#switch-to-previous-screen","title":"switch to previous screen","text":"<pre><code>Ctrl+a+p\n</code></pre>"},{"location":"linux/#exit-screen","title":"exit screen","text":"<pre><code>exit\n</code></pre>"},{"location":"php/","title":"PHP","text":""},{"location":"php/#php-cheat-sheet","title":"PHP Cheat Sheet","text":""},{"location":"php/#php","title":"PHP","text":"<p>PHP is een scripttaal die gebruikt wordt om dynamische website te bouwen. Vroeger stond de afkorting voor \"Personal Home Page\", tegenwoordig voor \"PHP Hypertext Preprocessor\". PHP bestaat sinds 1994 en wordt sindsdien actief doorontwikkeld.</p>"},{"location":"php/#bronnen","title":"Bronnen","text":"<p>Buiten deze Cheat Sheet om zijn hier nog een paar interessante sites met informatie over PHP</p> Site Beschrijving w3schools PHP Tutorial Veel voorbeelden en een mooie tryit editor om code uit te proberen. Codecademy Alles over PHP ingedeeld in categori\u00ebn. Begrijpelijke taal Offici\u00eble PHP documentie Technisch maar compleet. Vaak met voorbeelden van gebruikers PHP The Right Way Compleet, maar nogal technisch. Uitgebreide voorbeeldcode <p>Als je voorbeeld code uit deze cheat sheet snel wilt uitproberen gebruik dan de TryIt editor van W3Schools.</p>"},{"location":"php/#variabelen","title":"Variabelen","text":"<p>Een variabele is een stukje geheugen in je programma met een naam. </p> <p>In dat stukje geheugen kan je een waarde opslaan. Je kan tekst opslaan maar ook getallen en datums. </p> <p>In php herken je een variabele omdat er altijd het dollarteken \u201c$\u201d voor staat. Bijvoorbeeld: $variabele1, $variabele2, $auto_merk, etc.</p> <p>Je geeft een variabele een waarde door er het \u201c=\u201d teken er achter te zetten gevolgd door een waarde:</p> <pre><code>$var1 = \"Mercedes\";\n$var2 = 100000;\n</code></pre>"},{"location":"php/#arrays","title":"Arrays","text":"<p>Arrays zijn variabelen waar meerdere waarden in kunnen worden opgeslagen. Je kan een array vergelijken met een ladekast. In elk laatje kan je iets stoppen, een waarde. De laatjes hebben nummers die beginnen bij 0:</p> <p>In PHP maak je een array op de volgende manier:</p> <pre><code>$cars = array(\"Volvo\", \"BMW\", \"Toyota\");\n</code></pre> <p>Nu heb je een array met de naam $cars. Er zitten drie elementen in. Op plek 0 zit \u201cVolvo\u201d, op plek 1 zit \u201cBMW\u201d en op plek 2 zit \u201cToyota\u201d.</p> <p>Als je iets uit de array wilt halen gebruik je de blokhaken met de index van het element dat je nodig hebt:</p> <pre><code>$myCar = $cars[2];\necho $myCar;\n</code></pre>"},{"location":"php/#associative-arrays","title":"Associative arrays","text":"<p>Elk element in een standaard array heeft een index. Die index begint bij 0. </p> <p>Je hebt behalve de standaard arrays in PHP ook de beschikking over een associative array. Bij een associative array kan je een eigen key als index opgeven.</p> <pre><code>$studenten = array(1010001 =&gt; \"Jelle van Eijk\", 1010002 =&gt; \"Els ten Brugge\", 1010003 =&gt; \"Mark Hoogland\");\necho $studenten[1010002];\n</code></pre> <p>De key in een associative array kan een nummer of een string zijn.</p>"},{"location":"php/#loops","title":"Loops","text":"<p>PHP heeft drie verschillende soorten loops. Hieronder staan voorbeelden van alledrie. </p>"},{"location":"php/#while-loop","title":"while loop","text":"<pre><code>$cars = array(\"Volvo\", \"BMW\", \"Toyota\");\n$i = 0;\n\nwhile ($i &lt; count($cars)) {\n    echo $cars[$i] . \"&lt;br&gt;\";\n    $i++;\n}\n</code></pre>"},{"location":"php/#for-loop","title":"for loop","text":"<pre><code>$cars = array(\"Volvo\", \"BMW\", \"Toyota\");\n\nfor ($i = 0; $i &lt; count($cars); $i++) {\n    echo $cars[$i] . \"&lt;br&gt;\";\n}\n</code></pre>"},{"location":"php/#foreach-loop-meest-gebruikt-voor-arrays","title":"foreach loop (meest gebruikt voor arrays)","text":"<p>De foreach loop heeft twee vormen, de eerste gebruikt alleen de waarden in de array, de tweede vorm haalt ook de keys op</p> Alleen waardenWaarden en Keys <pre><code>$cars = array(\"Volvo\", \"BMW\", \"Toyota\");\n\nforeach ($cars as $car) {\n    echo $car . \"&lt;br&gt;\";\n}\n</code></pre> <pre><code>$cars = array(\"Volvo\", \"BMW\", \"Toyota\");\n\nforeach ($cars as $key =&gt; $car) {\n    echo \"$key: $car\" . \"&lt;br&gt;\";\n}\n</code></pre>"},{"location":"php/#if-elseif-else","title":"if-elseif-else","text":"<pre><code>$uur = 14;\nif ($uur &lt;= 12) {\n   $dagdeel = \"ochtend\";\n} elseif ($uur &gt; 12 &amp;&amp; $uur &lt; 18) {\n   $dagdeel = \"middag\";\n} else {\n   $dagdeel = \"avond\";\n}\necho $dagdeel;\n</code></pre>"},{"location":"php/#de-ternary-operator","title":"De ternary operator (?)","text":"<p>Met de ternary operator \"?\" kan je op \u00e9\u00e9n regel een volledig if-else statement schrijven.</p> <p>Een gewone if-else: <pre><code>$naam = \"Wim\";\nif ($naam == \"Wim\") {\n  $isWim = true;\n} else {\n  $isWim = false;\n}\n</code></pre></p> <p>Dezelfde if-else maar nu met de ternary operator:</p> <pre><code>$isWim = ($naam == \"Wim\") ? true : false;\n</code></pre>"},{"location":"php/#samenvoegen-van-tekst","title":"Samenvoegen van tekst (.)","text":"<p>Aan elkaar plakken van stukjes tekst doe je met de punt \".\". <pre><code>$error = \"fout bij verwerken van het form\";\n$melding = \"fout: \" . $error;\necho $melding;\n</code></pre></p> <p>Je kan dit ook nog op een andere (betere) manier doen: <pre><code>$error = \"fout bij verwerken van het form\";\n$melding = \"fout: $error\";\necho $melding;\n</code></pre> De laatste manier kan je alleen gebruiken met string tussen dubbele aanhalingstekens!</p> <p>Welke manier je gebruikt hangt af van de situatie en je kiest elke keer de meest geschikte methode, met de voorkeur voor de laatste manier.</p>"},{"location":"php/#functies","title":"functies","text":"<p>Functies zijn blokjes code. Je kan functies gebruiken om je code overzichtelijk te maken en ook om dezelfde code maar 1x te schrijven.</p> <p>Je kan gegevens aan functies meegeven. Dat noemen we parameters. De parameters staan tussen de haakjes achter de functienaam. Als je meer parameters nodig hebt zet je een komma tussen elke parameter.</p> <p>Een functie kan ook een waarde teruggeven. Dit doe je met 'return'. De waarde die wordt teruggegeven noemen we de return value. <pre><code>echo dagdeel(14);\n\nfunction dagdeel($uur) {\n    if ($uur &lt;= 12) {\n        $dagdeel = \"ochtend\";\n    } elseif ($uur &gt; 12 &amp;&amp; $uur &lt; 18) {\n        $dagdeel = \"middag\";\n    } else {\n        $dagdeel = \"avond\";\n    }\n    return $dagdeel;\n}\n</code></pre> In dit voorbeeld is $uur een parameter en de functie geeft de waarde van de variabele $dagdeel terug.</p>"},{"location":"php/#forms-en-inputs-formform","title":"Forms en inputs &lt;form&gt;&lt;/form&gt;","text":"<p>Een voorbeeld van een eenvoudig form met bijbehorende php bestand om de input te verwerken.</p> index.html<pre><code>&lt;form action=\"process.php\" method=\"POST\"&gt;\n  &lt;input type=\"text\" name=\"voornaam\"&gt;\n  &lt;input type=\"text\" name=\"achternaam\"&gt;\n\n  &lt;input type=\"submit\" value=\"Versturen\"&gt;\n&lt;/form&gt;\n</code></pre> process.php<pre><code>&lt;?php\n\n$voornaam = empty($_POST[\"voornaam\"]) ? \"onbekend\" : $_POST[\"voornaam\"];\n$achternaam = empty($_POST[\"achternaam\"]) ? \"onbekend\" : $_POST[\"achternaam\"];\n\necho \"Voornaam: \" . $voornaam . \"&lt;br&gt;\"\necho \"Achternaam: \" . $achternaam;\n</code></pre>"},{"location":"php/#naar-een-andere-pagina-gaan-redirect","title":"Naar een andere pagina gaan (redirect)","text":"<p>Je kan vanuit een PHP programma de gebruiker naar een andere pagina sturen met een redirect: <pre><code>header(\"Location: index.php\");\n</code></pre></p>"},{"location":"php/#fouten-in-code-afvangen","title":"Fouten in code afvangen","text":"<p>Je kan in PHP stukjes code tegen fouten beschermen met try - catch</p> <pre><code>try {\n   // code om uit te voeren\n} catch (Exception $e) {\n   // hier wordt een eventuele fout afgevangen\n}\n</code></pre>"},{"location":"php/#code-invoegen-include","title":"Code invoegen (include)","text":"<p>Je kan een ander PHP bestand invoegen met include</p> <pre><code>&lt;?php \n   include(\"dbcode.php\"); // de code in dbcode.php wordt ingevoegd\n\n   // overige code\n</code></pre>"},{"location":"php/#html-genereren","title":"HTML genereren","text":"<p>Met PHP kan je HTML genereren. Zo maak je een webpagina dynamisch.</p> <p>Het komt bijvoorbeeld regelmatig voor dat je een lijst met gegevens wilt laten zien. De gegevens kunnen uit een database komen of ze kunnen een statische lijst in je code zijn.</p> <p>We tonen een paar veelvoorkomende situaties.</p> <p>Als je de code in werking wilt zien, kopieer je de code en plak je die in de W3Schools TryIt editor</p>"},{"location":"php/#de-waarde-van-een-input-vullen","title":"De waarde van een input vullen","text":"<p><pre><code>&lt;?php\n$adres = \"Willemskade 23\";\n?&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;input type=\"text\" value=\"&lt;?php echo $adres ?&gt;\" &gt;\n\n&lt;!-- zelfde maar nu met een short-hand echo tag --&gt;\n&lt;input type=\"text\" value=\"&lt;?= $adres ?&gt;\" &gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> De short-hand echo tag <code>&lt;?=</code> is een kortere manier om <code>&lt;?php echo</code> te schrijven</p>"},{"location":"php/#een-table-maken","title":"Een table maken","text":"<pre><code>&lt;?php\n$data = array(\n    array(\"Name\" =&gt; \"Wytse Bergsma\", \"StudentId\" =&gt; 12225, \"Grade\" =&gt; 10),\n    array(\"Name\" =&gt; \"Arne Woudsma\", \"StudentId\" =&gt; 12230, \"Grade\" =&gt; 7),\n    array(\"Name\" =&gt; \"Sofia Douma\", \"StudentId\" =&gt; 12222, \"Grade\" =&gt; 9)\n);\n?&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n    &lt;table border=\"1\"&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Naam&lt;/th&gt;\n            &lt;th&gt;Id&lt;/th&gt;\n            &lt;th&gt;Cijfer&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;?php foreach($data as $row): ?&gt;\n            &lt;tr&gt;\n                &lt;td&gt;&lt;?php echo $row['Name']; ?&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;?php echo $row['StudentId']; ?&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;?php echo $row['Grade']; ?&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;?php endforeach; ?&gt;\n    &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"php/#een-dropdown-box-vullen-met-opties","title":"Een dropdown box vullen met opties","text":"<pre><code>&lt;?php\n$shoeTypes = array(\"Bergschoenen\", \"Herenschoenen\", \"Pumps\", \"Sneakers\", \"Sandalen\");\n?&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n    &lt;select name=\"schoe-type\"&gt;\n        &lt;?php foreach($shoeTypes as $shoeType): ?&gt;\n            &lt;option value=\"&lt;?php echo $shoeType; ?&gt;\"&gt;&lt;?php echo $shoeType; ?&gt;&lt;/option&gt;\n        &lt;?php endforeach; ?&gt;\n    &lt;/select&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"php/#een-navigatie-menu-maken","title":"Een navigatie menu maken","text":"<pre><code>&lt;?php\n$menu = array(\n    \"Home\" =&gt; \"index.php\",\n    \"Products\" =&gt; \"products.php\",\n    \"Contact\" =&gt; \"contact.php\"\n);\n?&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n    &lt;nav&gt;\n        &lt;ul&gt;\n            &lt;?php foreach($menu as $title =&gt; $link): ?&gt;\n                &lt;li&gt;&lt;a href=\"&lt;?php echo $link; ?&gt;\"&gt;&lt;?php echo $title; ?&gt;&lt;/a&gt;&lt;/li&gt;\n            &lt;?php endforeach; ?&gt;\n        &lt;/ul&gt;\n    &lt;/nav&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"phpenmysql/","title":"PHP en MySQL","text":""},{"location":"phpenmysql/#php-en-mysql-cheat-sheet","title":"PHP en MySQL Cheat Sheet","text":""},{"location":"phpenmysql/#database-aanmaken","title":"Database aanmaken","text":"<p>Een database met de naam \"mijndatabase\" aanmaken:</p> <pre><code>CREATE DATABASE mijndatabase;\n</code></pre>"},{"location":"phpenmysql/#database-selecteren-om-te-gebruiken","title":"Database selecteren om te gebruiken","text":"<p>Een database met de naam \"mijndatabase\" selecteren om daarna te kunnen gebruiken:</p> <pre><code>USE mijndatabase;\n</code></pre>"},{"location":"phpenmysql/#tabel-aanmaken","title":"Tabel aanmaken","text":"<p>Om de tabel \"voorbeeld\" te maken met de kolommen kolom1, kolom2 en kolom3, voer je het onderstaande SQL statement uit: <pre><code>CREATE TABLE voorbeeld\n(\n  kolom1 VARCHAR(10),\n  kolom2 TEXT,\n  kolom3 DATETIME\n);\n</code></pre> * Het datatype van kolom1 is VARCHAR(10), tekst van maximaal 10 karakters * Het datatype van kolom2 is TEXT, tekst van onbeperkte lengte * Het datatype van kolom3 is DATETIME, een datum en tijd</p>"},{"location":"phpenmysql/#gegevens-uit-een-tabel-selecteren","title":"Gegevens uit een tabel selecteren","text":"<p>Om gegevens uit de tabel \"voorbeeld\" te selecteren, voer je het onderstaande SQL statement uit: <pre><code>SELECT * FROM voorbeeld;\n</code></pre></p>"},{"location":"phpenmysql/#gegevens-invoeren-in-een-tabel","title":"Gegevens invoeren in een tabel","text":"<p>Om gegevens in de tabel \"voorbeeld\" in te voeren, voer je het onderstaande SQL statement uit: <pre><code>INSERT INTO voorbeeld (kolom1, kolom2, kolom3) \nVALUES(\"tekst1\", \"tekst2\", \"01-01-2019\");\n</code></pre></p>"},{"location":"phpenmysql/#een-script-uitvoeren-op-mysql","title":"Een script uitvoeren op mysql","text":"<p>Stel je hebt een script met de naam create_db.sql. In dit script staat een SQL statement om een tabel aan te maken. Je kan nu het script op mysql uitvoeren door op de command prompt het volgende commando te geven: <pre><code>mysql -u [username] -p [password] &lt; create_db.sql\n</code></pre></p>"},{"location":"phpenmysql/#met-php-een-verbinding-maken-met-de-database","title":"Met PHP een verbinding maken met de database","text":"<p>Stel je hebt een database met de naam \"school\", de gebruiker van de database is \"root\" en het wachtwoord is ook \"geheim123\". Dan maak je een verbinding met deze database met de onderstaande code:</p> <pre><code>$host = 'localhost';\n$dbname = 'school';\n$username = 'root';\n$password = 'geheim123';\n\n$connectStr = 'mysql:host=' . $host . ';dbname=' . $dbname . ';charset=utf8';\n$db = new PDO($connectStr, $username, $password);\n// Om fouten af te vangen met try-catch, het onderstaande toevoegen\n$db-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);        \n</code></pre>"},{"location":"phpenmysql/#met-php-code-een-record-toevoegen-aan-een-tabel","title":"Met PHP code een record toevoegen aan een tabel","text":"<p>Stel je hebt een tabel met de naam 'student' en je wilt hier een record aan toevoegen met de twee kolommen 'naam', 'jaar':</p> <pre><code>$sql = \"INSERT INTO student (naam, jaar) VALUES (:naam, :jaar)\";\n$params = array(\":naam\" =&gt; \"Jan\", \":jaar\" =&gt; \"2019\");\n\n$sth = $db-&gt;prepare($sql);\n$sth-&gt;execute($params);\n</code></pre>"},{"location":"phpenmysql/#met-php-de-records-uit-een-tabel-ophalen","title":"Met PHP de records uit een tabel ophalen","text":"<p>Stel je hebt de tabel 'student' en je wilt met PHP alle records (rijen) uit deze tabel ophalen en de gegevens met een echo weergeven:</p> <pre><code>$sql = \"SELECT * FROM student\";\n$sth = $db-&gt;prepare($sql);\n$sth-&gt;execute();\n\nwhile($row = $sth-&gt;fetch()) {\n    $naam = $row[\"naam\"];\n    $jaar = $row[\"jaar\"];\n    echo \"Naam student: $naam Leerjaar: $jaar\";\n}\n</code></pre>"},{"location":"phpenmysql/#controleren-of-alle-gewenste-input-aanwezig-is-in-de-_post-array","title":"Controleren of alle gewenste input aanwezig is in de $_POST array","text":"<p>Als je tijdens het testen wilt weten welke gegevens in de de $_POST array terecht zijn gekomen kan je met de functie print_r() alle elementen van de $_POST array tonen:</p> <pre><code>$voornaam = empty($_POST[\"voornaam\"]) ? \"onbekend\" : $_POST[\"voornaam\"];\n$achternaam = empty($_POST[\"achternaam\"]) ? \"onbekend\" : $_POST[\"achternaam\"];\n\n// Laten zien welke gegevens in de $_POST zitten\necho print_r($_POST);\n</code></pre>"},{"location":"phpenmysql/#fouten-afvangen-met-try-catch","title":"Fouten afvangen met try - catch","text":"<p>Met try - catch kan je fouten bij het uitvoeren van de code netjes afvangen. Ze de code om uit te voeren tussen het code block na de try en vang eventuele fouten af tussen het code block na de catch:</p> <p><pre><code>$sql = \"INSERT INTO student (naam, jaar) VALUES (:naam, :jaar)\";\n$params = array(\":naam\" =&gt; \"Jan\", \":jaar\" =&gt; \"2019\");\n\ntry {\n  // Dit stukje code wil je beschermen tegen een fout\n  $sth = $db-&gt;prepare($sql);\n  $sth-&gt;execute($params);\n} catch (PDOException $e) {\n  // In de catch wordt de fout afgevangen en kan je iets met de foutmelding\n  // doen, bijvoorbeeld tonen of loggen\n  echo $e-&gt;getMessage();\n}\n</code></pre> Let op! Om een PDO exception (fouten bij het uitvoeren van database commandos's) af te vangen moet je het volgende toevoegen na het maken van de database connectie:</p> <pre><code>$db-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n</code></pre>"},{"location":"phpenmysql/#input-veilig-verwerken","title":"Input veilig verwerken","text":"<p>Input van een formulier moet je veilig verwerken. Zeker als je de input ook weer laat zien met een echo moet je ervoor zorgen dat er geen Cross Site Scripting (XSS) gebruikt kan worden door een hacker. Dit doe je met de htmlspecialchars() functie : <pre><code>$voornaam = empty($_POST[\"voornaam\"]) ? \"onbekend\" : $_POST[\"voornaam\"];\n$achternaam = empty($_POST[\"achternaam\"]) ? \"onbekend\" : $_POST[\"achternaam\"];\n\n// Dit is NIET veilig\necho $voornaam . \" \" . $achternaam\n\n// Zo wordt het veilig\n$voornaam = htmlspecialchars($voornaam);\n$achternaam = htmlspecialchars($achternaam);\necho $voornaam . \" \" . $achternaam;\n</code></pre></p>"},{"location":"phpenmysql/#tablerows-in-een-php-loop-maken","title":"Tablerows in een php loop maken","text":"<p>Als je records uit een SELECT wilt afdrukken in een tabel gebruik je voor de tablerows de onderstaande code.  <pre><code>&lt;?php while($row = $sth-&gt;fetch()) { ?&gt;\n    &lt;tr&gt;\n        &lt;td&gt;&lt;?php echo $row[\"voornaam\"]; ?&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;?php echo $row[\"achternaam\"]; ?&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;?php } ?&gt;\n</code></pre></p>"},{"location":"phpenmysql/#id-meegeven-in-een-link","title":"ID meegeven in een link","text":"<p>Als je een id van een record wilt meegeven als parameter in een url gebruik je onderstaande code. Het id komt uiteindelijk in de $_GET array van PHP <pre><code>&lt;a href=\"update-student-form.php?id=&lt;?php echo $row[\"id\"]?&gt;\"\n</code></pre></p>"},{"location":"phpenmysql/#met-php-een-update-statement-maken","title":"Met PHP een UPDATE statement maken","text":"<p>Stel je wilt de tabel student updaten. Je wilt de kolommen voornaam en achternaam wijzigen van een student met een bepaalde id als primary key: <pre><code>// Maak eerst het sql update statement in een string\n$sql = \"UPDATE student \n   SET voornaam = :voornaam, achternaam = :achternaam\n   WHERE id = :id\";\n\n// Vul een array met waarden voor de placeholders\n$params = array(\n    \":id\" =&gt; $id,\n    \":voornaam\" =&gt; $voornaam,\n    \":achternaam\" =&gt; $achternaam\n);\n\n// Voer het statement uit op de database\n$sth = $db-&gt;prepare($sql);\n$sth-&gt;execute($params);\n</code></pre></p>"},{"location":"phpenmysql/#met-php-een-specifiek-record-selecteren","title":"Met PHP een specifiek record selecteren","text":"<p>Om een specifiek record te selecteren moet je in je SELECT statement een WHERE gebruiken. Stel je wilt een student selecteren met een specifieke id: <pre><code>// Maak het sql select statement als string\n$sql = \"SELECT * FROM student WHERE id=:id\";\n\n// Maak een array met de waarden bij de placeholder\n$params = array(\n    \":id\" =&gt; $id\n);\n\n// Voer uit op de database\n// De gegevens van de student komen in de array $student\n$sth = $db-&gt;prepare($sql);\n$sth-&gt;execute($params);\n$student = $sth-&gt;fetch();\n</code></pre></p>"},{"location":"phpenmysql/#met-php-een-specifiek-record-verwijderen-uit-een-tabel","title":"Met PHP een specifiek record verwijderen uit een tabel","text":"<p>Om een specifiek record te vewijderen uit een tabel gebruik je een DELETE statement in combinatie met een WHERE. Stel je wilt uit de tabel student een record met een specifiek id verwijderen: <pre><code>// Maak het sql delete statement als string\n$sql = \"DELETE FROM student WHERE id=:id\";\n\n// Maak een array met de waarden bij de placeholder\n$params = array(\n    \":id\" =&gt; $id\n);\n\n// Voer uit op de database\n$sth = $db-&gt;prepare($sql);\n$sth-&gt;execute($params);\n</code></pre></p>"}]}